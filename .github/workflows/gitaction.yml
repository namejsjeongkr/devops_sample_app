# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI For Sample Python application

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  # Organization Secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.PERSONAL_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.PERSONAL_AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: 086230238707.dkr.ecr.ap-northeast-2.amazonaws.com
  AWS_REGION: ap-northeast-2 # AWS EKS & ECR이 위치한 AWS Region
  STAGE: demod_apnortheast2
  CLUSTER_NAME: demodapne2-abcd
  NAMESPACE: default
  APP_NAME: sample-app
  
jobs:  
  build:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Src
        uses: actions/checkout@v3

      - name: fetch src
        run: git fetch --prune --unshallow
  
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Get Tag with py
        id: vars
        run: |
          echo ::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sample-app
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
      - name: Checkout k8s-env
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          repository: namejsjeongkr/devops_k8s_env
          ref: main
  
      - name: Update Image tag
        run: |
          sed -i '/^/s/tag:.*/tag: ${{ steps.vars.outputs.sha_short }}/' ./${STAGE}/${CLUSTER_NAME}/${NAMESPACE}/${APP_NAME}/bluegreen/image.yaml
          sed -i '/^/s/tag:.*/tag: ${{ steps.vars.outputs.sha_short }}/' ./${STAGE}/${CLUSTER_NAME}/${NAMESPACE}/${APP_NAME}/canary/image.yaml
          ls
        shell: bash
  
      - name: GIT commit and push docs
        env:
          CI_COMMIT_MESSAGE: Update Tag - ${{ steps.vars.outputs.tag }}
          CI_COMMIT_AUTHOR: namejsjeongkr
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "namejsjeongkr@lguplus.co.kr"
          git status
          git add -A
          git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push origin main
